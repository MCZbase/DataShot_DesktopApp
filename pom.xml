<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>edu.harvard.mcz</groupId>
	<artifactId>DataShot</artifactId>
	<version>1.3.4-SNAPSHOT</version>
	<!-- Remeber to edit src/main/java/edu/harvard/mcz/imagecapture/ImageCaptureApp.java -->
	<name>datashot</name>
	<description>MCZ DataShot Collection Imaging Application</description>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.filteredpush</groupId>
			<artifactId>event_date_qc</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>2.7.7</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
			<version>1.5</version>
		</dependency>
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>2.1.7</version>
		</dependency>
		<dependency>
			<groupId>org.dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>2.1.3</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.mojo.hibernate3</groupId>
			<artifactId>maven-hibernate3</artifactId>
			<version>2.2</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.4.GA</version>
		</dependency>
		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.drewnoakes</groupId>
			<artifactId>metadata-extractor</artifactId>
			<version>2.9.1</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.28</version>
		</dependency>
		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swingx</artifactId>
			<version>0.9.7</version>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>core</artifactId>
			<version>3.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>javase</artifactId>
			<version>3.3.0</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc14</artifactId>
			<version>10.2.0.5.0</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-forms</artifactId>
			<version>1.6.0</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-common</artifactId>
			<version>1.4.0</version>
		</dependency>
		<!-- <dependency> <groupId>net.imglib2</groupId> <artifactId>imglib2</artifactId> 
			<version>2.0.0-SNAPSHOT</version> </dependency> -->
		<dependency>
			<groupId>org.imgscalr</groupId>
			<artifactId>imgscalr-lib</artifactId>
			<version>4.2</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.8</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.17.1</version>
		</dependency>
		<!-- dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.1.4.Final</version>
		</dependency -->
		<!--   dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
		</dependency -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>3.3.1.GA</version>
            <exclusions>
              <exclusion>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
              </exclusion>
              <exclusion>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
              </exclusion>
              <exclusion>
    			<groupId>org.slf4j</groupId>
    	   		<artifactId>slf4j-api</artifactId>
              </exclusion>
            </exclusions>			
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.17.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.17.1</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.32</version>
		</dependency>
		<dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>2.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.2</version>
        </dependency>
	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/java</directory>
				<includes>
					<include>**/*.jpg</include>
					<include>**/*.JPG</include>
				</includes>
			</testResource>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<verbose>true</verbose>
					<fork>true</fork>
					<compilerVersion>1.8</compilerVersion>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<!-- Exclude integration tests from default test phase (see integrationTests 
					profile) -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.11</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>2.12</version>
					</dependency>
				</dependencies>
				<configuration>
					<includes>
						<include>**/*.class</include>
					</includes>
					<excludedGroups>edu.harvard.mcz.imagecapture.tests.IntegrationTest</excludedGroups>
				</configuration>
			</plugin>
			<!--   plugin>
				disabled for now, requires maven 3
				<groupId>com.soebes.maven.plugins</groupId>
				<artifactId>echo-maven-plugin</artifactId>
				<version>0.3.0</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>echo</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<echos>
						<echo>Available profiles: -P integrationTests,production,ant.</echo>
						<echo>mvn clean package -P production and -P ant put executable
							jar files in build/.</echo>
					</echos>
				</configuration>
			</plugin -->
		</plugins>
	</build>
	<profiles>
		<profile>
			<!-- mvn package -P integrationTests -->
			<id>integrationTests</id>
			<build>
				<!-- Runs those tests which require connection to a database, will bring 
					up a login dialog while running tests -->
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludedGroups>edu.harvard.mcz.imagecapture.tests.IgnoreInIntegration</excludedGroups>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- mvn package -P production -->
			<id>production</id>
			<build>
				<!-- (1) Copies production hibernate and log4j configuration files from 
					not_vcs/ into target/classes, then -->
				<!-- (2) Assembles an executable jar file (jar-with-dependencies), then -->
				<!-- (3) Copies the executable jar file into the build/ directory. -->
				<plugins>
					<!-- This could be accomplished more simply with the maven-shade-plugin, 
						but that requires maven 3, -->
					<!-- currently aiming to maintain support for builds with maven version 
						2.2 -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.7</version>
						<dependencies>
							<dependency>
								<groupId>org.apache.maven.shared</groupId>
								<artifactId>maven-filtering</artifactId>
								<version>1.3</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/target/classes/</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>not_vcs/</directory>
											<targetPath>${basedir}/target/classes/</targetPath>
											<includes>
												<include>hibernate.cfg.xml</include>
												<include>log4j2.xml</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<archive>
								<manifest>
									<mainClass>edu.harvard.mcz.imagecapture.ImageCaptureApp</mainClass>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>2.8</version>
						<executions>
							<execution>
								<id>copy-installed</id>
								<phase>install</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>${project.groupId}</groupId>
											<artifactId>${project.artifactId}</artifactId>
											<version>${project.version}</version>
											<type>${project.packaging}</type>
											<classifier>jar-with-dependencies</classifier>
											<overWrite>true</overWrite>
										</artifactItem>
									</artifactItems>
									<outputDirectory>${basedir}/build/</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--  plugin>
						<Not yet tested skeletal configuration to use maven-shade-plugin instead of above, requires maven 3. 
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>3.0.0</version>
						<executions>
							<execution>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<transformers>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
											<resource>hibernate.cfg.xml</resource>
											<file>${basedir}/not_vcs/hibernate.cfg.xml</file>
										</transformer>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<manifestEntries>
												<Main-Class>edu.harvard.mcz.imagecapture.ImageCaptureApp</Main-Class>
												<X-Compile-Source-JDK>${maven.compile.source}</X-Compile-Source-JDK>
												<X-Compile-Target-JDK>${maven.compile.target}</X-Compile-Target-JDK>
											</manifestEntries>
										</transformer>
									</transformers>
								</configuration>
							</execution>
						</executions>
					</plugin -->
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- mvn package -P ant -->
			<id>ant</id>
			<build>
				<!-- old distribution jar build using ant -->
				<!-- (1) Uses ant build to create an executable jar file -->
				<!-- copying production hibernate and log4j configurations from not_vcs 
					into the jar. -->
				<!-- (2) Places the jar in the build/ directory. -->
				<!-- (3) Also creates an executable jar for testing barcodes in images 
					in build/ directory. -->
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>DataShotApp</id>
								<phase>package</phase>
								<configuration>
									<target>
										<ant antfile="${basedir}/buildAppJar.xml">
											<target name="create_run_jar" />
										</ant>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<execution>
								<id>CandidateImageFileHelperApp</id>
								<phase>package</phase>
								<configuration>
									<target>
										<ant antfile="${basedir}/build_CIF.xml">
											<target name="create_run_jar" />
										</ant>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
